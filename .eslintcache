[{"/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/index.js":"1","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/App.js":"2","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/reportWebVitals.js":"3","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Header.js":"4","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Unlockables.js":"5","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/PlayerDashboard.js":"6","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Setup.js":"7","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Footer.js":"8","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/utilities/DataContext.js":"9","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Recruitment.js":"10","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/MapTabs.js":"11","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/RedStarTracker.js":"12","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/HQ.js":"13","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/CombatRoll.js":"14","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/AmmoShortage.js":"15","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Bunker.js":"16","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Mercenary.js":"17","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/BioHazard.js":"18","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Star.js":"19","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Odds.js":"20","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Rooms.js":"21"},{"size":548,"mtime":1610743461685,"results":"22","hashOfConfig":"23"},{"size":1089,"mtime":1611073533091,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1610743461685,"results":"25","hashOfConfig":"23"},{"size":1498,"mtime":1611073488544,"results":"26","hashOfConfig":"23"},{"size":3690,"mtime":1610743461685,"results":"27","hashOfConfig":"23"},{"size":1706,"mtime":1610743461683,"results":"28","hashOfConfig":"23"},{"size":6421,"mtime":1611080600357,"results":"29","hashOfConfig":"23"},{"size":159,"mtime":1610743461682,"results":"30","hashOfConfig":"23"},{"size":38839,"mtime":1611077463091,"results":"31","hashOfConfig":"23"},{"size":1294,"mtime":1610743461683,"results":"32","hashOfConfig":"23"},{"size":5421,"mtime":1610743461682,"results":"33","hashOfConfig":"23"},{"size":525,"mtime":1610743461683,"results":"34","hashOfConfig":"23"},{"size":477,"mtime":1610743461682,"results":"35","hashOfConfig":"23"},{"size":7233,"mtime":1610743461682,"results":"36","hashOfConfig":"23"},{"size":470,"mtime":1610743461681,"results":"37","hashOfConfig":"23"},{"size":478,"mtime":1610743461681,"results":"38","hashOfConfig":"23"},{"size":474,"mtime":1610743461683,"results":"39","hashOfConfig":"23"},{"size":475,"mtime":1610743461681,"results":"40","hashOfConfig":"23"},{"size":618,"mtime":1610743461684,"results":"41","hashOfConfig":"23"},{"size":1643,"mtime":1610743461683,"results":"42","hashOfConfig":"23"},{"size":3431,"mtime":1611075716498,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"fis3vn",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/index.js",[],["97","98"],"/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/App.js",[],"/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/reportWebVitals.js",[],"/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Header.js",["99"],"/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Unlockables.js",["100","101","102"],"import React, { useState } from 'react'\nimport { Card, CardHeader, Container, Row, Col, CardBody, CardFooter, Button } from 'reactstrap';\n\nconst Unlockables = (props) => {\n    {/* players will need to be moved to a useContext helper that is populated from Austin's new game modal */ }\n\n    return (\n        <Container className='mt-3'>\n            <Row>\n                <div className='card-deck'>\n                    <Col className='col-6 mb-3'>\n                        <Card>\n                            <>\n                                <CardBody>\n                                    Founded all 9 minor cities.\n                                </CardBody>\n                                <CardFooter>\n                                    <Button>Open</Button>\n                                </CardFooter>\n                            </>\n                        </Card>\n                    </Col>\n                    <Col className='col-6 mb-3'>\n                        <Card>\n                            <>\n                                <CardBody>\n                                    First Time a Faction is Eliminated from the Game.\n                                </CardBody>\n                                <CardFooter>\n                                    <Button>Open</Button>\n                                </CardFooter>\n                            </>\n                        </Card>\n                    </Col>\n                    <Col className='col-6 mb-3'>\n                        <Card>\n                            <>\n                                <CardBody>\n                                    Open When Three Missiles Are Used On the Same Combat Roll.\n                                </CardBody>\n                                <CardFooter>\n                                    <Button>Open</Button>\n                                </CardFooter>\n                            </>\n                        </Card>\n                    </Col>\n                    <Col className='col-6 mb-3'>\n                        <Card>\n                            <>\n                                <CardBody>\n                                    Open When The World Capital Mark Is About To Go On The Board.\n                                </CardBody>\n                                <CardFooter>\n                                    <Button>Open</Button>\n                                </CardFooter>\n                            </>\n\n                        </Card>\n                    </Col>\n                    <Col className='col-6 mb-3'>\n                        <Card>\n                            <>\n                                <CardBody>\n                                    Open When One Person Gets to Sign the Board For A Second Time.\n                                </CardBody>\n                                <CardFooter>\n                                    <Button>Open</Button>\n                                </CardFooter>\n                            </>\n\n                        </Card>\n                    </Col>\n                    <Col className='col-6 mb-3'>\n                        <Card>\n                            <>\n                                <CardBody>\n                                    Open When Someone Is About To Place 30+ Troops On The Board And Has A Missile.\n                                </CardBody>\n                                <CardFooter>\n                                    <Button>Open</Button>\n                                </CardFooter>\n                            </>\n\n                        </Card>\n                    </Col>\n                </div>\n\n            </Row>\n\n\n        </Container>\n    );\n};\n\nexport default Unlockables;","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/PlayerDashboard.js",["103"],"import React, { useState, useContext } from 'react'\nimport { Card, CardTitle, Row, Col, Container } from 'reactstrap';\nimport RedStarTracker from './RedStarTracker'\nimport Recruitment from './Recruitment'\nimport MapTabs from './MapTabs';\nimport DataContext from '../utilities/DataContext';\n\nconst PlayerDashboard = (props) => {\n\n    //map through each continent within the territories JSON\n    //return array of territories objects\n\n    const { players } = useContext(DataContext)\n\n\n    return (\n        <Container className='mt-3'>\n            <Card>\n                <Row className=\"my-3 justify-content-center\">\n                    {players.map((item, idx) => {\n                        return (\n                            <Col key={idx} className='my-2'>\n                                <RedStarTracker player={item} />\n                            </Col>\n                        )\n                    })\n                    }\n                </Row>\n            </Card>\n            <Row className=\"mt-3\">\n                <Col sm=\"6\">\n                    {/* Territory Pane */}\n                    <Card body>\n                        <CardTitle tag=\"h5\">Territories</CardTitle>\n                        <MapTabs\n                            players={players}\n                        />\n                    </Card>\n                </Col>\n                <Col sm=\"6\">\n                    <Row>\n                        <Col>\n                            <Recruitment\n                                players={players}\n                            />\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default PlayerDashboard;","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Setup.js",["104","105"],"/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Footer.js",[],"/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/utilities/DataContext.js",[],"/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Recruitment.js",[],"/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/MapTabs.js",["106","107"],"import React, { useState, useContext } from 'react';\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Row, Col, ListGroup, ListGroupItem, Collapse, Card, CardHeader, Badge } from 'reactstrap';\nimport classnames from 'classnames';\nimport CombatRoll from './CombatRoll';\nimport AmmoShortage from './AmmoShortage';\nimport HQ from './HQ';\nimport Bunker from './Bunker';\nimport Mercenary from './Mercenary';\nimport BioHazard from './BioHazard';\nimport DataContext from '../utilities/DataContext';\n\nconst MapTabs = (props) => {\n    const [activeTab, setActiveTab] = useState('1');\n    const toggle = tab => { if (activeTab !== tab) setActiveTab(tab); }\n    const [toggleCollapse, setToggleCollapse] = useState(-1);\n    const { regions, setRegions } = useContext(DataContext)\n    \n\n    function toggleAccordian(id) {\n        if (toggleCollapse == id) {\n            setToggleCollapse(-1)\n        }\n        else {\n            setToggleCollapse(id)\n        }\n    }\n\n\n    return (\n        <>\n            <Nav tabs>\n                <NavItem>\n                    <NavLink className={classnames({ active: activeTab === '1' })} onClick={() => { toggle('1'); }}>Group by Continent</NavLink>\n                </NavItem>\n                <NavItem>\n                    <NavLink className={classnames({ active: activeTab === '2' })} onClick={() => { toggle('2'); }}>Group by Player</NavLink>\n                </NavItem>\n            </Nav>\n            <TabContent activeTab={activeTab}>\n                <TabPane tabId=\"1\">\n                    <Row>\n                        <Col sm=\"12\">\n                            {\n                                regions.map((region, idx) => {\n                                    return (\n                                        <>\n                                            <Card key={idx}>\n                                                <CardHeader onClick={() => toggleAccordian(idx)}>\n                                                    <h5>{region.continent} <Badge className=\"text-light rounded-pill bg-secondary ml-3\">{region.bonus}</Badge></h5>\n                                                </CardHeader>\n                                                <Collapse isOpen={toggleCollapse === idx ? true : false}>\n                                                    <ListGroup>\n                                                        {\n                                                            region.territories.map((i, key) => {\n                                                                return (\n                                                                    <ListGroupItem key={key}>\n                                                                        <h5>\n                                                                            {i.name}\n                                                                            <HQ hq={i.hq} />\n                                                                            <Bunker bunker={i.bunker} />\n                                                                            <AmmoShortage ammoShortage={i.ammoShortage} />\n                                                                            <Mercenary mercenary={i.mercenary} />\n                                                                            <BioHazard bioHazard={i.bioHazard} />\n                                                                            <CombatRoll />\n                                                                        </h5>\n                                                                    </ListGroupItem>\n                                                                )\n                                                            })\n                                                        }\n                                                    </ListGroup>\n                                                </Collapse>\n                                            </Card>\n                                        </>\n                                    )\n                                })\n                            }\n                        </Col>\n                    </Row>\n                </TabPane>\n                <TabPane tabId=\"2\">\n                    <Row>\n                        <Col sm=\"12\">\n                            {\n                                props.players.map((player, idx) => {\n                                    return (\n                                        <>\n                                            <Card key={idx}>\n                                                <CardHeader onClick={() => setToggleCollapse(idx)}>\n                                                    <h5>{player.name}</h5>\n                                                </CardHeader>\n                                                <Collapse isOpen={toggleCollapse === idx ? true : false}>\n                                                    <ListGroup>\n                                                    </ListGroup>\n                                                </Collapse>\n                                            </Card>\n                                        </>\n                                    )\n                                })\n                            }\n                        </Col>\n                    </Row>\n                </TabPane>\n            </TabContent>\n        </>\n    );\n}\n\nexport default MapTabs;","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/RedStarTracker.js",[],"/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/HQ.js",["108"],"import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUserPlus } from '@fortawesome/free-solid-svg-icons'\n\nconst HQ = (props) => {\n    const [test, setTest] = useState({})\n\n    return (\n        <>\n            {\n                test.hq &&\n                    <FontAwesomeIcon className='m-2 mt-3 fa-2x' color={props.player.color} icon={faUserPlus} />            \n            }\n        </>\n    )\n}\n\nexport default HQ","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/CombatRoll.js",["109","110","111","112"],"import React, { useState, useContext } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faDiceD6 } from '@fortawesome/free-solid-svg-icons'\nimport { Button, Row, Col, Modal, ModalHeader, ModalBody, ModalFooter, Input, Label } from 'reactstrap';\nimport Select from \"react-select\";\nimport Bunker from './Bunker';\nimport AmmoShortage from './AmmoShortage';\nimport Odds from './Odds';\nimport DataContext from '../utilities/DataContext';\n\n\nconst CombatRoll = (props) => {\n    const [battleground, setBattleground] = useState('');\n    const [attackingFrom, setAttackingFrom] = useState('');\n    const [modal, setModal] = useState(false);\n    {/* players will need to be moved to a useContext helper that is populated from Austin's new game modal */ }\n    const { className } = props;\n    const toggle = () => setModal(!modal);\n    const { territories, setTerritories } = useContext(DataContext)\n\n\n    function diceRoll(att, def) {\n        let attDice = []\n        let defDice = []\n        for (let i = 0; i < att; i++) {\n            attDice.push(Math.ceil(Math.random() * 6))\n        }\n\n        for (let j = 0; j < def; j++) {\n            defDice.push(Math.ceil(Math.random() * 6))\n        }\n\n        // //___sort results___\n        attDice.sort(function (a, b) {\n            return b - a;\n        })\n\n        defDice.sort(function (a, b) {\n            return b - a;\n        })\n\n        //____die modifiers____\n        //      Scar: bunker: +1 to the defenders high die\n        //      Scar: ammoShortage: -1 to the defenders high die\n        //      Scar: fortified: +1 to both defenders die, and reduce fortification value if attacked by at least 3 soldiers\n        //      Faction: DieMechaniker natural 6's territory cannot be attacked again\n        //      Faction: DieMechaniker HQ is always fortified as defender\n        //      Faction: Enclave of the Bear, defender subtract 1 from lower die in first territory you attack on your turn\n        //      Faction: Enclave of the Bear, natural 3 of a kind and at least 1 enemy then kill all enemies in that territory\n        //      Faction: Mutants, when attacking BoNF, you may re-roll 1's until they are no longer 1's\n        //      comebackPower: Well-Armed, +1 to all attack die when attacking an HQ\n        //      comebackPower: Well-Supplied, When defending, you are unaffected by ammo shortage scars\n        //      misslePower: EMP, activate before a combat roll, Dice rolled for combat in that territory can't be modified for the rest of the turn\n        //      mutantPower: Unnatural Strength: When attacking, your 6's beat defenders 6's\n        //      mutantPower: Unstable Cloning: When defending: if you roll natural doubles, add 1 add'l defending troop to the territory if you still own it after the battle\n\n        //___re-sort if necessary___and compare\n        attDice.sort(function (a, b) {\n            return b - a;\n        })\n\n        defDice.sort(function (a, b) {\n            return b - a;\n        })\n\n        console.log(attDice);\n        console.log(defDice);\n\n        if ((defDice[0] >= attDice[0]) && (defDice[1] >= attDice[1])) {\n            //defender kills 2 attackers\n            return (\"Attacker Loses 2\");\n        }\n        else if ((defDice[0] < attDice[0]) && (defDice[1] < attDice[1])) {\n            //attacker kills 2 defenders\n            return (\"Defender Loses 2\");\n        }\n        else {\n            //each lose 1\n            return (\"Attacker and Defender each lose 1\");\n        }\n    }\n\n\n    return (\n        <>\n            <Button className='mx-3 bg-white border-0' onClick={toggle}>\n                <FontAwesomeIcon className='p-0 fa-2x text-dark' icon={faDiceD6} />\n            </Button>\n            <Modal isOpen={modal} size='lg' toggle={toggle} className={className}>\n                <ModalHeader toggle={toggle}></ModalHeader>\n                <ModalBody>\n                    <>\n                        <Odds />\n                        <Row>\n                            <Col className=\"justify-content-center\">\n                                <Label>Battleground</Label>\n                                <Select\n                                    className=\"text-dark\"\n                                    defaultValue={'Select...'}\n                                    onChange={setBattleground}\n                                    options={territories}\n                                />\n                            </Col>\n                            <Col className=\"justify-content-center\">\n                                <Label>Attacking From</Label>\n                                {battleground ?\n                                    <Select\n                                        className=\"text-dark\"\n                                        defaultValue={'Select Battleground First'}\n                                        onChange={setAttackingFrom}\n                                        //needs to only display the adjacent territories to the selected battleground (part of the territory object)\n                                        options={territories}\n                                    />\n                                    :\n                                    <Select\n                                        disabled\n                                        className=\"text-dark\"\n                                        defaultValue={'Pick Battleground'}\n                                        onChange={setAttackingFrom}\n                                        //needs to only display the adjacent territories to the selected battleground (part of the territory object)\n                                        options={territories}\n                                    />\n\n                                }\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col className=\"justify-content-center\">\n                                <Label>Defender</Label>\n                                <Input></Input>\n                            </Col>\n                            <Col className=\"justify-content-center\">\n                                <Label>Attacker</Label>\n                                <Input></Input>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col className='justify-content-center col-6'>\n                                <Bunker\n                                    battleground={battleground}\n                                />\n                                <AmmoShortage\n                                    battleground={battleground}\n                                />\n                            </Col>\n                            <Col className='col-6'>\n                            </Col>\n                        </Row>\n                    </>\n                </ModalBody>\n                <ModalFooter className=\"justify-content-center\">\n                    <Button color=\"primary\" onClick={toggle}>Roll</Button>{' '}\n                    <Button color=\"secondary\" onClick={toggle}>Retreat</Button>\n                </ModalFooter>\n            </Modal>\n        </>\n    )\n}\n\nexport default CombatRoll","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/AmmoShortage.js",["113"],"import React, {useState} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBan } from '@fortawesome/free-solid-svg-icons'\n\nconst AmmoShortage = (props) => {\n    const [test, setTest] = useState({})\n\n    return (\n        <>\n            {\n                test.ammoShortage &&\n                    <FontAwesomeIcon className='m-2 mt-3 fa-2x' color={'red'} icon={faBan} />\n            }\n        </>\n    )\n}\n\nexport default AmmoShortage","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Bunker.js",["114"],"import React, {useState} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faFortAwesomeAlt } from '@fortawesome/free-brands-svg-icons'\n\nconst Bunker = (props) => {\n    const [test, setTest] = useState({})\n\n    return (\n        <>\n            {\n                test.bunker &&\n                    <FontAwesomeIcon className='m-2 mt-3 fa-3x' color={'orange'} icon={faFortAwesomeAlt} />\n            }\n        </>\n    )\n}\n\nexport default Bunker","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Mercenary.js",["115"],"import React, {useState} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUserPlus } from '@fortawesome/free-solid-svg-icons'\n\nconst Mercenary = (props) => {\n    const [test, setTest] = useState({})\n\n    return (\n        <>\n            {\n                test.mercenary &&\n                    <FontAwesomeIcon className='m-2 mt-3 fa-2x' color={'black'} icon={faUserPlus} />\n\n            }\n        </>\n    )\n}\n\nexport default Mercenary","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/BioHazard.js",["116"],"import React, {useState} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBiohazard } from '@fortawesome/free-solid-svg-icons'\n\nconst BioHazard = (props) => {\n    const [test, setTest] = useState({})\n\n    return (\n        <>\n            {\n                test.bioHazard &&\n                    <FontAwesomeIcon className='m-2 mt-3 fa-2x' color={'green'} icon={faBiohazard} />\n            }\n        </>\n    )\n}\n\nexport default BioHazard","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Star.js",[],"/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Odds.js",["117"],"import React, { useState } from 'react';\nimport { Row, Col, Label, Progress } from 'reactstrap';\n\nconst Odds = (props) => {\n    const [battleSelected, setBattleSelected] = useState(true)\n\n    return (\n        <>\n            <Row>\n                <Col className='text-center text-success'>\n                    <Label >Defender Loses 2</Label>\n                </Col>\n                <Col className='text-center text-warning'>\n                    <Label >Both Lose 1</Label>\n                </Col>\n                <Col className='text-center text-danger'>\n                    <Label >Attacker Loses 2</Label>\n                </Col>\n            </Row>\n            {\n                battleSelected ? \n                <Row>\n                    <Col>\n                        <Progress className='m-3' multi>\n                            <Progress bar color=\"success\" value=\"55\">55%</Progress>\n                            <Progress bar color=\"warning\" value=\"10\">10%</Progress>\n                            <Progress bar color=\"danger\" value=\"35\">35%</Progress>\n                        </Progress>\n                    </Col>\n                </Row>\n                :\n                <Row>\n                    <Col>\n                        <Progress className='m-3' multi>\n                            <Progress bar color=\"success\" value=\"0\"></Progress>\n                            <Progress bar color=\"warning\" value=\"0\"></Progress>\n                            <Progress bar color=\"danger\" value=\"0\"></Progress>\n                        </Progress>\n                    </Col>\n                </Row>\n            }\n        </>\n    );\n};\n\nexport default Odds;","/Users/reesehudson/Sites/bootcampF20/projects/risk-player-aid/src/Components/Rooms.js",["118","119"],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":2,"column":87,"nodeType":"126","messageId":"127","endLine":2,"endColumn":97},{"ruleId":"124","severity":1,"message":"128","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":25},{"ruleId":"124","severity":1,"message":"129","line":2,"column":16,"nodeType":"126","messageId":"127","endLine":2,"endColumn":26},{"ruleId":"130","severity":1,"message":"131","line":5,"column":5,"nodeType":"132","messageId":"133","endLine":5,"endColumn":113},{"ruleId":"124","severity":1,"message":"128","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":25},{"ruleId":"124","severity":1,"message":"134","line":6,"column":19,"nodeType":"126","messageId":"127","endLine":6,"endColumn":27},{"ruleId":"124","severity":1,"message":"135","line":10,"column":23,"nodeType":"126","messageId":"127","endLine":10,"endColumn":34},{"ruleId":"124","severity":1,"message":"136","line":16,"column":22,"nodeType":"126","messageId":"127","endLine":16,"endColumn":32},{"ruleId":"137","severity":1,"message":"138","line":20,"column":28,"nodeType":"139","messageId":"140","endLine":20,"endColumn":30},{"ruleId":"124","severity":1,"message":"141","line":6,"column":18,"nodeType":"126","messageId":"127","endLine":6,"endColumn":25},{"ruleId":"124","severity":1,"message":"142","line":14,"column":12,"nodeType":"126","messageId":"127","endLine":14,"endColumn":25},{"ruleId":"130","severity":1,"message":"131","line":16,"column":5,"nodeType":"132","messageId":"133","endLine":16,"endColumn":113},{"ruleId":"124","severity":1,"message":"143","line":19,"column":26,"nodeType":"126","messageId":"127","endLine":19,"endColumn":40},{"ruleId":"124","severity":1,"message":"144","line":22,"column":14,"nodeType":"126","messageId":"127","endLine":22,"endColumn":22},{"ruleId":"124","severity":1,"message":"141","line":6,"column":18,"nodeType":"126","messageId":"127","endLine":6,"endColumn":25},{"ruleId":"124","severity":1,"message":"141","line":6,"column":18,"nodeType":"126","messageId":"127","endLine":6,"endColumn":25},{"ruleId":"124","severity":1,"message":"141","line":6,"column":18,"nodeType":"126","messageId":"127","endLine":6,"endColumn":25},{"ruleId":"124","severity":1,"message":"141","line":6,"column":18,"nodeType":"126","messageId":"127","endLine":6,"endColumn":25},{"ruleId":"124","severity":1,"message":"145","line":5,"column":28,"nodeType":"126","messageId":"127","endLine":5,"endColumn":45},{"ruleId":"124","severity":1,"message":"146","line":5,"column":12,"nodeType":"126","messageId":"127","endLine":5,"endColumn":16},{"ruleId":"124","severity":1,"message":"141","line":5,"column":18,"nodeType":"126","messageId":"127","endLine":5,"endColumn":25},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"no-unused-vars","'NavbarText' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'CardHeader' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'setDraft' is assigned a value but never used.","'setFactions' is assigned a value but never used.","'setRegions' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setTest' is assigned a value but never used.","'attackingFrom' is assigned a value but never used.","'setTerritories' is assigned a value but never used.","'diceRoll' is defined but never used.","'setBattleSelected' is assigned a value but never used.","'test' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]