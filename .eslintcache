[{"/Users/jamesdavies/Sites/risk-player-aid/src/index.js":"1","/Users/jamesdavies/Sites/risk-player-aid/src/reportWebVitals.js":"2","/Users/jamesdavies/Sites/risk-player-aid/src/App.js":"3","/Users/jamesdavies/Sites/risk-player-aid/src/Components/Unlockables.js":"4","/Users/jamesdavies/Sites/risk-player-aid/src/Components/Footer.js":"5","/Users/jamesdavies/Sites/risk-player-aid/src/Components/Rooms.js":"6","/Users/jamesdavies/Sites/risk-player-aid/src/Components/Header.js":"7","/Users/jamesdavies/Sites/risk-player-aid/src/Components/Setup.js":"8","/Users/jamesdavies/Sites/risk-player-aid/src/Components/PlayerDashboard.js":"9","/Users/jamesdavies/Sites/risk-player-aid/src/utilities/DataContext.js":"10","/Users/jamesdavies/Sites/risk-player-aid/src/Components/Recruitment.js":"11","/Users/jamesdavies/Sites/risk-player-aid/src/Components/RedStarTracker.js":"12","/Users/jamesdavies/Sites/risk-player-aid/src/Components/MapTabs.js":"13","/Users/jamesdavies/Sites/risk-player-aid/src/Components/AmmoShortage.js":"14","/Users/jamesdavies/Sites/risk-player-aid/src/Components/HQ.js":"15","/Users/jamesdavies/Sites/risk-player-aid/src/Components/Bunker.js":"16","/Users/jamesdavies/Sites/risk-player-aid/src/Components/Mercenary.js":"17","/Users/jamesdavies/Sites/risk-player-aid/src/Components/BioHazard.js":"18","/Users/jamesdavies/Sites/risk-player-aid/src/Components/Star.js":"19","/Users/jamesdavies/Sites/risk-player-aid/src/Components/CombatModal.js":"20","/Users/jamesdavies/Sites/risk-player-aid/src/Components/Odds.js":"21","/Users/jamesdavies/Sites/risk-player-aid/src/Components/MissleTracker.js":"22"},{"size":548,"mtime":1610745399383,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1610745399383,"results":"25","hashOfConfig":"24"},{"size":1043,"mtime":1611693565410,"results":"26","hashOfConfig":"24"},{"size":3690,"mtime":1610745399382,"results":"27","hashOfConfig":"24"},{"size":159,"mtime":1610745399380,"results":"28","hashOfConfig":"24"},{"size":3431,"mtime":1611081061799,"results":"29","hashOfConfig":"24"},{"size":1498,"mtime":1611081061798,"results":"30","hashOfConfig":"24"},{"size":7417,"mtime":1611693112489,"results":"31","hashOfConfig":"24"},{"size":2567,"mtime":1611795872267,"results":"32","hashOfConfig":"24"},{"size":38844,"mtime":1611693112491,"results":"33","hashOfConfig":"24"},{"size":1294,"mtime":1610745399382,"results":"34","hashOfConfig":"24"},{"size":607,"mtime":1611693112489,"results":"35","hashOfConfig":"24"},{"size":6504,"mtime":1611693112487,"results":"36","hashOfConfig":"24"},{"size":470,"mtime":1610745399378,"results":"37","hashOfConfig":"24"},{"size":477,"mtime":1610745399381,"results":"38","hashOfConfig":"24"},{"size":478,"mtime":1610745399379,"results":"39","hashOfConfig":"24"},{"size":474,"mtime":1610745399381,"results":"40","hashOfConfig":"24"},{"size":475,"mtime":1610745399378,"results":"41","hashOfConfig":"24"},{"size":618,"mtime":1611693112490,"results":"42","hashOfConfig":"24"},{"size":7314,"mtime":1611693112486,"results":"43","hashOfConfig":"24"},{"size":1643,"mtime":1610745399381,"results":"44","hashOfConfig":"24"},{"size":969,"mtime":1611795797781,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"bht9vf",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"48"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"48"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jamesdavies/Sites/risk-player-aid/src/index.js",[],["103","104"],"/Users/jamesdavies/Sites/risk-player-aid/src/reportWebVitals.js",[],"/Users/jamesdavies/Sites/risk-player-aid/src/App.js",[],"/Users/jamesdavies/Sites/risk-player-aid/src/Components/Unlockables.js",["105","106","107"],"import React, { useState } from 'react'\nimport { Card, CardHeader, Container, Row, Col, CardBody, CardFooter, Button } from 'reactstrap';\n\nconst Unlockables = (props) => {\n    {/* players will need to be moved to a useContext helper that is populated from Austin's new game modal */ }\n\n    return (\n        <Container className='mt-3'>\n            <Row>\n                <div className='card-deck'>\n                    <Col className='col-6 mb-3'>\n                        <Card>\n                            <>\n                                <CardBody>\n                                    Founded all 9 minor cities.\n                                </CardBody>\n                                <CardFooter>\n                                    <Button>Open</Button>\n                                </CardFooter>\n                            </>\n                        </Card>\n                    </Col>\n                    <Col className='col-6 mb-3'>\n                        <Card>\n                            <>\n                                <CardBody>\n                                    First Time a Faction is Eliminated from the Game.\n                                </CardBody>\n                                <CardFooter>\n                                    <Button>Open</Button>\n                                </CardFooter>\n                            </>\n                        </Card>\n                    </Col>\n                    <Col className='col-6 mb-3'>\n                        <Card>\n                            <>\n                                <CardBody>\n                                    Open When Three Missiles Are Used On the Same Combat Roll.\n                                </CardBody>\n                                <CardFooter>\n                                    <Button>Open</Button>\n                                </CardFooter>\n                            </>\n                        </Card>\n                    </Col>\n                    <Col className='col-6 mb-3'>\n                        <Card>\n                            <>\n                                <CardBody>\n                                    Open When The World Capital Mark Is About To Go On The Board.\n                                </CardBody>\n                                <CardFooter>\n                                    <Button>Open</Button>\n                                </CardFooter>\n                            </>\n\n                        </Card>\n                    </Col>\n                    <Col className='col-6 mb-3'>\n                        <Card>\n                            <>\n                                <CardBody>\n                                    Open When One Person Gets to Sign the Board For A Second Time.\n                                </CardBody>\n                                <CardFooter>\n                                    <Button>Open</Button>\n                                </CardFooter>\n                            </>\n\n                        </Card>\n                    </Col>\n                    <Col className='col-6 mb-3'>\n                        <Card>\n                            <>\n                                <CardBody>\n                                    Open When Someone Is About To Place 30+ Troops On The Board And Has A Missile.\n                                </CardBody>\n                                <CardFooter>\n                                    <Button>Open</Button>\n                                </CardFooter>\n                            </>\n\n                        </Card>\n                    </Col>\n                </div>\n\n            </Row>\n\n\n        </Container>\n    );\n};\n\nexport default Unlockables;","/Users/jamesdavies/Sites/risk-player-aid/src/Components/Footer.js",[],"/Users/jamesdavies/Sites/risk-player-aid/src/Components/Rooms.js",["108","109"],"import React, { useState } from 'react';\nimport { Container, ListGroup, ListGroupItem, Row, Col, Card, CardHeader, CardBody, CardFooter, Button } from 'reactstrap';\n\nconst Rooms = (props) => {\n    const [test, setTest] = useState({})\n\n    return (\n        <>\n            <Container>\n                <Row>\n                    <Col>\n                        <Card>\n                            <CardHeader></CardHeader>\n                            <CardBody>\n                                <ListGroup flush>\n                                    <ListGroupItem action>\n                                        <Row>\n                                            <Col>\n                                                Room: XAGB\n                                            </Col>\n                                            <Col>\n                                                Host: Jim\n                                            </Col>\n                                            <Col>\n                                                <Button>Join</Button>\n                                            </Col>\n                                        </Row>\n                                    </ListGroupItem>\n                                    <ListGroupItem action>\n                                        <Row>\n                                            <Col>\n                                                Room: JKKS\n                                            </Col>\n                                            <Col>\n                                                Host: Joe\n                                            </Col>\n                                            <Col>\n                                                <Button>Join</Button>\n                                            </Col>\n                                        </Row>\n                                    </ListGroupItem>\n                                    <ListGroupItem action>\n                                        <Row>\n                                            <Col>\n                                                Room: AJIF\n                                            </Col>\n                                            <Col>\n                                                Host: Jack\n                                            </Col>\n                                            <Col>\n                                                <Button>Join</Button>\n                                            </Col>\n                                        </Row>\n                                    </ListGroupItem>\n                                </ListGroup>\n                            </CardBody>\n                            <CardFooter>\n                                <Button>\n                                    Create New Room\n                                </Button>\n                            </CardFooter>\n                        </Card>\n\n                    </Col>\n                </Row>\n            </Container>\n        </>\n    )\n}\n\nexport default Rooms\n\n\n// {/* <div class=\"col-md-12\">\n//   <div class=\"form-group\">\n//     <div class=\"input-group\">\n//       <span class=\"input-group-addon\">Name</span>\n//       <input type=\"text\" class=\"form-control\">\n//       <div class=\"input-group-btn\">\n//         <button type=\"button\" class=\"btn btn-warning\">\n//           X\n//         </button>\n//       </div>\n//     </div>\n//   </div>\n// </div> */}","/Users/jamesdavies/Sites/risk-player-aid/src/Components/Header.js",["110"],"import React, { useState } from 'react';\nimport { Collapse, Button, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink, NavbarText } from 'reactstrap';\n\n\nconst Header = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar color=\"dark\" light expand=\"md\">\n        <NavbarBrand className='text-light' href=\"/\">Risk Legacy Helper</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"ml-auto\" navbar>\n            <NavItem className='m-2'>\n              <NavLink>\n                <Button href='/game'>\n                  <h6>Play</h6>\n                </Button>\n              </NavLink>\n            </NavItem>\n            <NavItem className='m-2'>\n              <NavLink>\n                <Button href='/setup'>\n                  <h6>New Game</h6>\n                </Button>\n              </NavLink>\n            </NavItem>\n            <NavItem className='m-2'>\n              <NavLink>\n                <Button href='/unlockables'>\n                  <h6>Unlockables</h6>\n                </Button>\n              </NavLink>\n            </NavItem>\n            <NavItem className='m-2'>\n            <NavLink>\n              <Button href='/rooms'>\n                <h6>Room: XXXX</h6>\n              </Button>\n            </NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </div >\n  );\n}\n\nexport default Header;\n","/Users/jamesdavies/Sites/risk-player-aid/src/Components/Setup.js",["111","112","113"],"import React, { useState, useContext } from 'react'\nimport { Row, Card, CardHeader, Container, Col, CardBody, Button, Label, Input } from 'reactstrap';\nimport DataContext from '../utilities/DataContext';\n\nconst Setup = (props) => {\n    const [draft, setDraft] = useState(false)\n\n    const { players, setPlayers } = useContext(DataContext)\n    //const [localPlayers, setLocalPlayers] = useState([])\n    const { factions, setFactions } = useContext(DataContext)\n    const [numberOfPlayers, setNumberOfPlayers] = useState(5)\n    const [playersLocked, setPlayersLocked] = useState(false)\n    const [allPlayersReady, setAllPlayersReady] = useState(false)\n\n    function addPlayer() {\n        setNumberOfPlayers(numberOfPlayers + 1)\n        let proxy = players\n        proxy.push({ id: players.length, name: \"\", faction: {} })\n        setPlayers(proxy)\n        console.log({ players })\n    }\n\n    function removePlayer() {\n        setNumberOfPlayers(numberOfPlayers - 1)\n        let proxy = players\n        proxy.pop()\n        setPlayers(proxy)\n        console.log({ players })\n    }\n    function readyPlayer() {\n\n    }\n\n    function submitPlayers() {\n        //disable player name inputs and open drafting choices\n        setPlayersLocked(true)\n        //assign player names to context hook\n        setPlayers([\n            { id: 0, name: \"\", faction: {}, ready: false },\n            { id: 1, name: \"\", faction: {}, ready: false },\n            { id: 2, name: \"\", faction: {}, ready: false },\n            { id: 3, name: \"\", faction: {}, ready: false },\n            { id: 4, name: \"\", faction: {}, ready: false },\n        ])\n    }\n\n    return (\n        <Container className='mt-3'>\n            {/* # of Players */}\n            <Row className='justify-content-center my-3'>\n                <h3 className='mr-2'>Number of Players:</h3>\n                {\n                    players.length > 3 && !playersLocked ?\n                        <Button onClick={() => removePlayer()} className='mx-2 p-2'>-</Button>\n                        :\n                        <Button disabled className='mx-2 p-2'>-</Button>\n                }\n                <h3 className='my-1'>{players.length}</h3>\n                {\n                    players.length < 5 && !playersLocked ?\n                        <Button onClick={() => addPlayer()} className='mx-2 p-2'>+</Button>\n                        :\n                        <Button disabled className='mx-2 p-2'>+</Button>\n                }\n            </Row>\n            {/* Names of Players */}\n            <Row>\n                {\n                    players.map((player, key) => {\n                        return (\n                            <Col key={key}>\n                                {\n                                    player.ready ?\n                                        <>\n                                            <Label>Player Name</Label>\n                                            <Input required></Input>\n                                            <Button className='bg-success my-3'>Ready</Button>\n                                        </>\n                                        :\n                                        <>\n                                            <Label>Player Name</Label>\n                                            <Input required></Input>\n                                            <Button onClick={() => readyPlayer()} className='bg-danger my-3'>Ready</Button>\n                                        </>\n                                }\n                            </Col>\n                        )\n                    })\n                }\n            </Row>\n            {\n                !playersLocked ?\n                    <>\n                        {\n                            allPlayersReady ?\n                                <Button className='my-3' onClick={() => submitPlayers()}>Submit</Button>\n\n                                :\n\n                                <Button disabled className='my-3'>Submit</Button>\n                        }\n                        {/* Submit button to lock in the player names */}\n                    </>\n                    :\n                    <>\n                        <Button className='my-3' onClick={() => setPlayersLocked(false)}>Go Back</Button>\n                        {/* If draft has been unlocked (via founding all minor cities) then draft process commence, else pick in pre-determined order */}\n                        {\n                            draft ?\n                                //show draft cards and snake draft for Faction, Turn Order, HQ Placement Order, Starting Troops, Coin Cards\n                                <>\n                                    <h3>Draft True</h3>\n                                </>\n                                :\n                                <>\n                                    <h3>Draft False</h3>\n                                </>\n                            //Pick Order to select Faction, Turn Order, HQ Placement Order\n                        }\n                        <Row>\n                            {\n                                factions.map((faction, key) => {\n                                    return (\n                                        <>\n                                            {\n                                                faction.unlocked &&\n                                                <Col key={key} className='col-6 mb-3' >\n                                                    <Card>\n                                                        <CardHeader>{faction.name}</CardHeader>\n                                                        <CardBody>\n                                                            <ul>\n                                                                {faction.bringerOfNuclearFire && <li className='mb-2'>Bringer of Nuclear Fire</li>}\n                                                                {faction.startingPower && <li className='mb-2'>{faction.startingPower[0]}</li>}\n                                                                {faction.startingPower && <li className='mb-2'>{faction.startingPower[1]}</li>}\n                                                                {faction.comebackPower && <li className='mb-2'>{faction.comebackPower}</li>}\n                                                                {faction.missilePower && <li className='mb-2'>{faction.missilePower}</li>}\n                                                                {faction.weakness && <li className='mb-2'>{faction.weakness}</li>}\n                                                                {faction.privateMission && <li className='mb-2'>{faction.privateMission}</li>}\n                                                            </ul>\n                                                        </CardBody>\n                                                    </Card>\n                                                </Col>\n                                            }\n                                        </>\n                                    )\n                                })\n                            }\n                        </Row>\n                        <Row>\n                            {\n\n                            }\n                        </Row>\n                    </>\n            }\n\n        </Container >\n    );\n};\n\nexport default Setup;","/Users/jamesdavies/Sites/risk-player-aid/src/Components/PlayerDashboard.js",["114","115"],"/Users/jamesdavies/Sites/risk-player-aid/src/utilities/DataContext.js",[],"/Users/jamesdavies/Sites/risk-player-aid/src/Components/Recruitment.js",[],"/Users/jamesdavies/Sites/risk-player-aid/src/Components/RedStarTracker.js",[],"/Users/jamesdavies/Sites/risk-player-aid/src/Components/MapTabs.js",["116","117"],"import React, { useState, useContext } from 'react';\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Row, Col, ListGroup, ListGroupItem, Collapse, Card, CardHeader, Badge } from 'reactstrap';\nimport classnames from 'classnames';\nimport CombatModal from './CombatModal';\nimport AmmoShortage from './AmmoShortage';\nimport HQ from './HQ';\nimport Bunker from './Bunker';\nimport Mercenary from './Mercenary';\nimport BioHazard from './BioHazard';\nimport DataContext from '../utilities/DataContext';\n\nconst MapTabs = (props) => {\n    const [activeTab, setActiveTab] = useState('1');\n    const toggle = tab => { if (activeTab !== tab) setActiveTab(tab); }\n    const [toggleCollapse, setToggleCollapse] = useState(-1);\n    const { regions, setRegions } = useContext(DataContext)\n\n    function toggleAccordian(id) {\n        if (toggleCollapse == id) {\n            setToggleCollapse(-1)\n        }\n        else {\n            setToggleCollapse(id)\n        }\n    }\n\n    return (\n        <>\n            <Nav tabs>\n                <NavItem>\n                    <NavLink className={classnames({ active: activeTab === '1' })} onClick={() => { toggle('1'); }}>Group by Continent</NavLink>\n                </NavItem>\n                <NavItem>\n                    <NavLink className={classnames({ active: activeTab === '2' })} onClick={() => { toggle('2'); }}>Group by Player</NavLink>\n                </NavItem>\n            </Nav>\n            <TabContent activeTab={activeTab}>\n                <TabPane tabId=\"1\">\n                    <Row>\n                        <Col sm=\"12\">\n                            {\n                                regions.map((region, idx) => {\n                                    return (\n                                        <>\n                                            <Card key={idx}>\n                                                <CardHeader onClick={() => toggleAccordian(idx)}>\n                                                    <h5>{region.continent} <Badge className=\"text-light rounded-pill bg-secondary ml-3\">{region.bonus}</Badge></h5>\n                                                </CardHeader>\n                                                <Collapse isOpen={toggleCollapse === idx ? true : false}>\n                                                    <ListGroup>\n                                                        {\n                                                            region.territories.map((i, key) => {\n                                                                return (\n                                                                    <ListGroupItem key={key}>\n                                                                        <Row>\n                                                                            <Col className='ml-2'>\n                                                                                <h5 className='py-3 mb-0'>\n                                                                                    {i.name}\n                                                                                </h5>\n                                                                            </Col>\n                                                                            <Col>\n                                                                                <HQ hq={i.hq} />\n                                                                            </Col>\n                                                                            <Col>\n                                                                                <Bunker bunker={i.bunker} />\n                                                                                <AmmoShortage ammoShortage={i.ammoShortage} />\n                                                                            </Col>\n                                                                            <Col>\n                                                                                <Mercenary mercenary={i.mercenary} />\n                                                                                <BioHazard bioHazard={i.bioHazard} />\n                                                                            </Col>\n                                                                            <Col>\n                                                                                <CombatModal battleground={i} />\n                                                                            </Col>\n                                                                        </Row>\n                                                                    </ListGroupItem>\n                                                                )\n                                                            })\n                                                        }\n                                                    </ListGroup>\n                                                </Collapse>\n                                            </Card>\n                                        </>\n                                    )\n                                })\n                            }\n                        </Col>\n                    </Row>\n                </TabPane>\n                <TabPane tabId=\"2\">\n                    <Row>\n                        <Col sm=\"12\">\n                            {\n                                props.players.map((player, idx) => {\n                                    return (\n                                        <>\n                                            <Card key={idx}>\n                                                <CardHeader onClick={() => setToggleCollapse(idx)}>\n                                                    <h5>{player.name}</h5>\n                                                </CardHeader>\n                                                <Collapse isOpen={toggleCollapse === idx ? true : false}>\n                                                    <ListGroup>\n                                                    </ListGroup>\n                                                </Collapse>\n                                            </Card>\n                                        </>\n                                    )\n                                })\n                            }\n                        </Col>\n                    </Row>\n                </TabPane>\n            </TabContent>\n        </>\n    );\n}\n\nexport default MapTabs;","/Users/jamesdavies/Sites/risk-player-aid/src/Components/AmmoShortage.js",["118"],"import React, {useState} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBan } from '@fortawesome/free-solid-svg-icons'\n\nconst AmmoShortage = (props) => {\n    const [test, setTest] = useState({})\n\n    return (\n        <>\n            {\n                test.ammoShortage &&\n                    <FontAwesomeIcon className='m-2 mt-3 fa-2x' color={'red'} icon={faBan} />\n            }\n        </>\n    )\n}\n\nexport default AmmoShortage","/Users/jamesdavies/Sites/risk-player-aid/src/Components/HQ.js",["119"],"import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUserPlus } from '@fortawesome/free-solid-svg-icons'\n\nconst HQ = (props) => {\n    const [test, setTest] = useState({})\n\n    return (\n        <>\n            {\n                test.hq &&\n                    <FontAwesomeIcon className='m-2 mt-3 fa-2x' color={props.player.color} icon={faUserPlus} />            \n            }\n        </>\n    )\n}\n\nexport default HQ","/Users/jamesdavies/Sites/risk-player-aid/src/Components/Bunker.js",["120"],"import React, {useState} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faFortAwesomeAlt } from '@fortawesome/free-brands-svg-icons'\n\nconst Bunker = (props) => {\n    const [test, setTest] = useState({})\n\n    return (\n        <>\n            {\n                test.bunker &&\n                    <FontAwesomeIcon className='m-2 mt-3 fa-3x' color={'orange'} icon={faFortAwesomeAlt} />\n            }\n        </>\n    )\n}\n\nexport default Bunker","/Users/jamesdavies/Sites/risk-player-aid/src/Components/Mercenary.js",["121"],"import React, {useState} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUserPlus } from '@fortawesome/free-solid-svg-icons'\n\nconst Mercenary = (props) => {\n    const [test, setTest] = useState({})\n\n    return (\n        <>\n            {\n                test.mercenary &&\n                    <FontAwesomeIcon className='m-2 mt-3 fa-2x' color={'black'} icon={faUserPlus} />\n\n            }\n        </>\n    )\n}\n\nexport default Mercenary","/Users/jamesdavies/Sites/risk-player-aid/src/Components/BioHazard.js",["122"],"import React, {useState} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBiohazard } from '@fortawesome/free-solid-svg-icons'\n\nconst BioHazard = (props) => {\n    const [test, setTest] = useState({})\n\n    return (\n        <>\n            {\n                test.bioHazard &&\n                    <FontAwesomeIcon className='m-2 mt-3 fa-2x' color={'green'} icon={faBiohazard} />\n            }\n        </>\n    )\n}\n\nexport default BioHazard","/Users/jamesdavies/Sites/risk-player-aid/src/Components/Star.js",[],"/Users/jamesdavies/Sites/risk-player-aid/src/Components/CombatModal.js",["123","124","125","126"],"import React, { useState, useContext } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faDiceD6 } from '@fortawesome/free-solid-svg-icons'\nimport { Button, Row, Col, Modal, ModalHeader, ModalBody, ModalFooter, Input, Label } from 'reactstrap';\nimport Select from \"react-select\";\nimport Bunker from './Bunker';\nimport AmmoShortage from './AmmoShortage';\nimport Odds from './Odds';\nimport DataContext from '../utilities/DataContext';\n\n\nconst CombatModal = (props) => {\n    const [battleground, setBattleground] = useState(`${props.battleground}`);\n    const [attackingFrom, setAttackingFrom] = useState('');\n    const [modal, setModal] = useState(false);\n    {/* players will need to be moved to a useContext helper that is populated from Austin's new game modal */ }\n    const { className } = props;\n    const toggle = () => setModal(!modal);\n    const { territories, setTerritories } = useContext(DataContext)\n\n\n    function diceRoll(att, def) {\n        let attDice = []\n        let defDice = []\n        for (let i = 0; i < att; i++) {\n            attDice.push(Math.ceil(Math.random() * 6))\n        }\n\n        for (let j = 0; j < def; j++) {\n            defDice.push(Math.ceil(Math.random() * 6))\n        }\n\n        // //___sort results___\n        attDice.sort(function (a, b) {\n            return b - a;\n        })\n\n        defDice.sort(function (a, b) {\n            return b - a;\n        })\n\n        //____die modifiers____\n        //      Scar: bunker: +1 to the defenders high die\n        //      Scar: ammoShortage: -1 to the defenders high die\n        //      Scar: fortified: +1 to both defenders die, and reduce fortification value if attacked by at least 3 soldiers\n        //      Faction: DieMechaniker natural 6's territory cannot be attacked again\n        //      Faction: DieMechaniker HQ is always fortified as defender\n        //      Faction: Enclave of the Bear, defender subtract 1 from lower die in first territory you attack on your turn\n        //      Faction: Enclave of the Bear, natural 3 of a kind and at least 1 enemy then kill all enemies in that territory\n        //      Faction: Mutants, when attacking BoNF, you may re-roll 1's until they are no longer 1's\n        //      comebackPower: Well-Armed, +1 to all attack die when attacking an HQ\n        //      comebackPower: Well-Supplied, When defending, you are unaffected by ammo shortage scars\n        //      misslePower: EMP, activate before a combat roll, Dice rolled for combat in that territory can't be modified for the rest of the turn\n        //      mutantPower: Unnatural Strength: When attacking, your 6's beat defenders 6's\n        //      mutantPower: Unstable Cloning: When defending: if you roll natural doubles, add 1 add'l defending troop to the territory if you still own it after the battle\n\n        //___re-sort if necessary___and compare\n        attDice.sort(function (a, b) {\n            return b - a;\n        })\n\n        defDice.sort(function (a, b) {\n            return b - a;\n        })\n\n        console.log(attDice);\n        console.log(defDice);\n\n        if ((defDice[0] >= attDice[0]) && (defDice[1] >= attDice[1])) {\n            //defender kills 2 attackers\n            return (\"Attacker Loses 2\");\n        }\n        else if ((defDice[0] < attDice[0]) && (defDice[1] < attDice[1])) {\n            //attacker kills 2 defenders\n            return (\"Defender Loses 2\");\n        }\n        else {\n            //each lose 1\n            return (\"Attacker and Defender each lose 1\");\n        }\n    }\n\n\n    return (\n        <>\n            <Button className='mx-3 bg-white border-0' onClick={toggle}>\n                <FontAwesomeIcon className='p-0 fa-2x text-dark' icon={faDiceD6} />\n            </Button>\n            <Modal isOpen={modal} size='lg' toggle={toggle} className={className}>\n                <ModalHeader toggle={toggle}></ModalHeader>\n                <ModalBody>\n                    <>\n                        <Odds />\n                        <Row>\n                            <Col className=\"justify-content-center\">\n                                <Label>Battleground</Label>\n                                <Select\n                                    className=\"text-dark\"\n                                    defaultValue={'Select...'}\n                                    onChange={setBattleground}\n                                    options={territories}\n                                />\n                            </Col>\n                            <Col className=\"justify-content-center\">\n                                <Label>Attacking From</Label>\n                                {battleground ?\n                                    <Select\n                                        className=\"text-dark\"\n                                        defaultValue={'Select Battleground First'}\n                                        onChange={setAttackingFrom}\n                                        //needs to only display the adjacent territories to the selected battleground (part of the territory object)\n                                        options={territories}\n                                    />\n                                    :\n                                    <Select\n                                        disabled\n                                        className=\"text-dark\"\n                                        defaultValue={'Pick Battleground'}\n                                        onChange={setAttackingFrom}\n                                        //needs to only display the adjacent territories to the selected battleground (part of the territory object)\n                                        options={territories}\n                                    />\n\n                                }\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col className=\"justify-content-center\">\n                                <Label className='mt-2'>Defender Troop Count</Label>\n                                <Input></Input>\n                            </Col>\n                            <Col className=\"justify-content-center\">\n                                <Label className='mt-2'>Attacker Troop Count</Label>\n                                <Input></Input>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col className='justify-content-center col-6'>\n                                <Bunker\n                                    battleground={battleground}\n                                />\n                                <AmmoShortage\n                                    battleground={battleground}\n                                />\n                            </Col>\n                            <Col className='col-6'>\n                            </Col>\n                        </Row>\n                    </>\n                </ModalBody>\n                <ModalFooter className=\"justify-content-center\">\n                    <Button color=\"primary\" onClick={toggle}>Roll</Button>{' '}\n                    <Button color=\"secondary\" onClick={toggle}>Retreat</Button>\n                </ModalFooter>\n            </Modal>\n        </>\n    )\n}\n\nexport default CombatModal","/Users/jamesdavies/Sites/risk-player-aid/src/Components/Odds.js",["127"],"import React, { useState } from 'react';\nimport { Row, Col, Label, Progress } from 'reactstrap';\n\nconst Odds = (props) => {\n    const [battleSelected, setBattleSelected] = useState(true)\n\n    return (\n        <>\n            <Row>\n                <Col className='text-center text-success'>\n                    <Label >Defender Loses 2</Label>\n                </Col>\n                <Col className='text-center text-warning'>\n                    <Label >Both Lose 1</Label>\n                </Col>\n                <Col className='text-center text-danger'>\n                    <Label >Attacker Loses 2</Label>\n                </Col>\n            </Row>\n            {\n                battleSelected ? \n                <Row>\n                    <Col>\n                        <Progress className='m-3' multi>\n                            <Progress bar color=\"success\" value=\"55\">55%</Progress>\n                            <Progress bar color=\"warning\" value=\"10\">10%</Progress>\n                            <Progress bar color=\"danger\" value=\"35\">35%</Progress>\n                        </Progress>\n                    </Col>\n                </Row>\n                :\n                <Row>\n                    <Col>\n                        <Progress className='m-3' multi>\n                            <Progress bar color=\"success\" value=\"0\"></Progress>\n                            <Progress bar color=\"warning\" value=\"0\"></Progress>\n                            <Progress bar color=\"danger\" value=\"0\"></Progress>\n                        </Progress>\n                    </Col>\n                </Row>\n            }\n        </>\n    );\n};\n\nexport default Odds;","/Users/jamesdavies/Sites/risk-player-aid/src/Components/MissleTracker.js",["128","129"],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":25},{"ruleId":"134","severity":1,"message":"138","line":2,"column":16,"nodeType":"136","messageId":"137","endLine":2,"endColumn":26},{"ruleId":"139","severity":1,"message":"140","line":5,"column":5,"nodeType":"141","messageId":"142","endLine":5,"endColumn":113},{"ruleId":"134","severity":1,"message":"143","line":5,"column":12,"nodeType":"136","messageId":"137","endLine":5,"endColumn":16},{"ruleId":"134","severity":1,"message":"144","line":5,"column":18,"nodeType":"136","messageId":"137","endLine":5,"endColumn":25},{"ruleId":"134","severity":1,"message":"145","line":2,"column":87,"nodeType":"136","messageId":"137","endLine":2,"endColumn":97},{"ruleId":"134","severity":1,"message":"146","line":6,"column":19,"nodeType":"136","messageId":"137","endLine":6,"endColumn":27},{"ruleId":"134","severity":1,"message":"147","line":10,"column":23,"nodeType":"136","messageId":"137","endLine":10,"endColumn":34},{"ruleId":"134","severity":1,"message":"148","line":13,"column":29,"nodeType":"136","messageId":"137","endLine":13,"endColumn":47},{"ruleId":"134","severity":1,"message":"135","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":25},{"ruleId":"134","severity":1,"message":"149","line":2,"column":48,"nodeType":"136","messageId":"137","endLine":2,"endColumn":57},{"ruleId":"134","severity":1,"message":"150","line":16,"column":22,"nodeType":"136","messageId":"137","endLine":16,"endColumn":32},{"ruleId":"151","severity":1,"message":"152","line":19,"column":28,"nodeType":"153","messageId":"154","endLine":19,"endColumn":30},{"ruleId":"134","severity":1,"message":"144","line":6,"column":18,"nodeType":"136","messageId":"137","endLine":6,"endColumn":25},{"ruleId":"134","severity":1,"message":"144","line":6,"column":18,"nodeType":"136","messageId":"137","endLine":6,"endColumn":25},{"ruleId":"134","severity":1,"message":"144","line":6,"column":18,"nodeType":"136","messageId":"137","endLine":6,"endColumn":25},{"ruleId":"134","severity":1,"message":"144","line":6,"column":18,"nodeType":"136","messageId":"137","endLine":6,"endColumn":25},{"ruleId":"134","severity":1,"message":"144","line":6,"column":18,"nodeType":"136","messageId":"137","endLine":6,"endColumn":25},{"ruleId":"134","severity":1,"message":"155","line":14,"column":12,"nodeType":"136","messageId":"137","endLine":14,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":16,"column":5,"nodeType":"141","messageId":"142","endLine":16,"endColumn":113},{"ruleId":"134","severity":1,"message":"156","line":19,"column":26,"nodeType":"136","messageId":"137","endLine":19,"endColumn":40},{"ruleId":"134","severity":1,"message":"157","line":22,"column":14,"nodeType":"136","messageId":"137","endLine":22,"endColumn":22},{"ruleId":"134","severity":1,"message":"158","line":5,"column":28,"nodeType":"136","messageId":"137","endLine":5,"endColumn":45},{"ruleId":"151","severity":1,"message":"152","line":15,"column":116,"nodeType":"153","messageId":"154","endLine":15,"endColumn":118},{"ruleId":"151","severity":1,"message":"152","line":19,"column":115,"nodeType":"153","messageId":"154","endLine":19,"endColumn":117},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'CardHeader' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'test' is assigned a value but never used.","'setTest' is assigned a value but never used.","'NavbarText' is defined but never used.","'setDraft' is assigned a value but never used.","'setFactions' is assigned a value but never used.","'setAllPlayersReady' is assigned a value but never used.","'CardGroup' is defined but never used.","'setRegions' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'attackingFrom' is assigned a value but never used.","'setTerritories' is assigned a value but never used.","'diceRoll' is defined but never used.","'setBattleSelected' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]